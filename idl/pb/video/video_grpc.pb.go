// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoService_GetVideoInfo_FullMethodName        = "/douyin.idl.video.VideoService/GetVideoInfo"
	VideoService_UpdateCommentCount_FullMethodName  = "/douyin.idl.video.VideoService/UpdateCommentCount"
	VideoService_UpdateFavoriteCount_FullMethodName = "/douyin.idl.video.VideoService/UpdateFavoriteCount"
	VideoService_Feed_FullMethodName                = "/douyin.idl.video.VideoService/Feed"
	VideoService_PublishAction_FullMethodName       = "/douyin.idl.video.VideoService/PublishAction"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	// 查找视频
	GetVideoInfo(ctx context.Context, in *DouyinVideoRequest, opts ...grpc.CallOption) (*DouyinVideoResponse, error)
	// 更新视频评论
	UpdateCommentCount(ctx context.Context, in *DouyinCommentCountRequest, opts ...grpc.CallOption) (*DouyinCommentCountResponse, error)
	// 更新视频点赞
	UpdateFavoriteCount(ctx context.Context, in *DouyinFavoriteCountRequest, opts ...grpc.CallOption) (*DouyinFavoriteCountResponse, error)
	// 视频流
	Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error)
	// 视频投稿
	PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetVideoInfo(ctx context.Context, in *DouyinVideoRequest, opts ...grpc.CallOption) (*DouyinVideoResponse, error) {
	out := new(DouyinVideoResponse)
	err := c.cc.Invoke(ctx, VideoService_GetVideoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UpdateCommentCount(ctx context.Context, in *DouyinCommentCountRequest, opts ...grpc.CallOption) (*DouyinCommentCountResponse, error) {
	out := new(DouyinCommentCountResponse)
	err := c.cc.Invoke(ctx, VideoService_UpdateCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UpdateFavoriteCount(ctx context.Context, in *DouyinFavoriteCountRequest, opts ...grpc.CallOption) (*DouyinFavoriteCountResponse, error) {
	out := new(DouyinFavoriteCountResponse)
	err := c.cc.Invoke(ctx, VideoService_UpdateFavoriteCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error) {
	out := new(DouyinFeedResponse)
	err := c.cc.Invoke(ctx, VideoService_Feed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error) {
	out := new(DouyinPublishActionResponse)
	err := c.cc.Invoke(ctx, VideoService_PublishAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	// 查找视频
	GetVideoInfo(context.Context, *DouyinVideoRequest) (*DouyinVideoResponse, error)
	// 更新视频评论
	UpdateCommentCount(context.Context, *DouyinCommentCountRequest) (*DouyinCommentCountResponse, error)
	// 更新视频点赞
	UpdateFavoriteCount(context.Context, *DouyinFavoriteCountRequest) (*DouyinFavoriteCountResponse, error)
	// 视频流
	Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error)
	// 视频投稿
	PublishAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) GetVideoInfo(context.Context, *DouyinVideoRequest) (*DouyinVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoServiceServer) UpdateCommentCount(context.Context, *DouyinCommentCountRequest) (*DouyinCommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentCount not implemented")
}
func (UnimplementedVideoServiceServer) UpdateFavoriteCount(context.Context, *DouyinFavoriteCountRequest) (*DouyinFavoriteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFavoriteCount not implemented")
}
func (UnimplementedVideoServiceServer) Feed(context.Context, *DouyinFeedRequest) (*DouyinFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedVideoServiceServer) PublishAction(context.Context, *DouyinPublishActionRequest) (*DouyinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoInfo(ctx, req.(*DouyinVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UpdateCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinCommentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UpdateCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_UpdateCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UpdateCommentCount(ctx, req.(*DouyinCommentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UpdateFavoriteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFavoriteCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UpdateFavoriteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_UpdateFavoriteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UpdateFavoriteCount(ctx, req.(*DouyinFavoriteCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_Feed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).Feed(ctx, req.(*DouyinFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_PublishAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).PublishAction(ctx, req.(*DouyinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.idl.video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoInfo",
			Handler:    _VideoService_GetVideoInfo_Handler,
		},
		{
			MethodName: "UpdateCommentCount",
			Handler:    _VideoService_UpdateCommentCount_Handler,
		},
		{
			MethodName: "UpdateFavoriteCount",
			Handler:    _VideoService_UpdateFavoriteCount_Handler,
		},
		{
			MethodName: "Feed",
			Handler:    _VideoService_Feed_Handler,
		},
		{
			MethodName: "PublishAction",
			Handler:    _VideoService_PublishAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
